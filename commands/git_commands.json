{
  "commands": [
    {
      "command": "git init",
      "type": "bash",
      "description": "Initializes a new Git repository.",
      "syntax": "git init [DIRECTORY]",
      "usage": "git init my-project",
      "params": [
        "--bare: Create a bare repository (no working directory).",
        "-q: Suppress output."
      ]
    },
    {
      "command": "git clone",
      "type": "bash",
      "description": "Creates a copy of an existing repository.",
      "syntax": "git clone [OPTIONS] REPOSITORY [DIRECTORY]",
      "usage": "git clone https://github.com/user/repo.git",
      "params": [
        "--depth: Create a shallow clone with limited history.",
        "--branch: Clone a specific branch.",
        "--recurse-submodules: Clone submodules."
      ]
    },
    {
      "command": "git add",
      "type": "bash",
      "description": "Adds file changes to the staging area.",
      "syntax": "git add [OPTIONS] [FILE...]",
      "usage": "git add .",
      "params": [
        "-n: Dry run to show what would be added.",
        "-A: Add changes to all files.",
        "--ignore-errors: Skip files with errors."
      ]
    },
    {
      "command": "git commit",
      "type": "bash",
      "description": "Records changes to the repository.",
      "syntax": "git commit [OPTIONS] -m 'MESSAGE'",
      "usage": "git commit -m 'Initial commit'",
      "params": [
        "-m: Use the given message as the commit message.",
        "--amend: Modify the last commit.",
        "--no-edit: Use the previous commit message."
      ]
    },
    {
      "command": "git status",
      "type": "bash",
      "description": "Displays the working directory and staging area status.",
      "syntax": "git status [OPTIONS]",
      "usage": "git status",
      "params": [
        "-s: Display a short format.",
        "--ignored: Show ignored files.",
        "--branch: Display branch information."
      ]
    },
    {
      "command": "git log",
      "type": "bash",
      "description": "Shows the commit history.",
      "syntax": "git log [OPTIONS]",
      "usage": "git log --oneline",
      "params": [
        "--oneline: Show commits in a single line.",
        "--graph: Display a graph of commits.",
        "--author: Filter commits by author."
      ]
    },
    {
      "command": "git branch",
      "type": "bash",
      "description": "Lists, creates, or deletes branches.",
      "syntax": "git branch [OPTIONS] [BRANCH_NAME]",
      "usage": "git branch -d old-branch",
      "params": [
        "-d: Delete a branch.",
        "-m: Rename a branch.",
        "-r: List remote branches."
      ]
    },
    {
      "command": "git checkout",
      "type": "bash",
      "description": "Switches branches or restores working directory files.",
      "syntax": "git checkout [OPTIONS] [BRANCH_OR_FILE]",
      "usage": "git checkout feature-branch",
      "params": [
        "-b: Create and switch to a new branch.",
        "--: Indicate that the following arguments are files."
      ]
    },
    {
      "command": "git merge",
      "type": "bash",
      "description": "Merges branches together.",
      "syntax": "git merge [BRANCH_NAME]",
      "usage": "git merge feature-branch",
      "params": [
        "--no-ff: Create a merge commit even if fast-forward is possible.",
        "--squash: Combine all commits into one during the merge.",
        "--abort: Abort the current merge."
      ]
    },
    {
      "command": "git pull",
      "type": "bash",
      "description": "Fetches changes from a remote repository and merges them.",
      "syntax": "git pull [OPTIONS] [REMOTE] [BRANCH]",
      "usage": "git pull origin main",
      "params": [
        "--rebase: Rebase the local commits on top of the remote branch.",
        "-q: Suppress output."
      ]
    },
    {
      "command": "git push",
      "type": "bash",
      "description": "Uploads local changes to a remote repository.",
      "syntax": "git push [OPTIONS] [REMOTE] [BRANCH]",
      "usage": "git push origin main",
      "params": [
        "-u: Set upstream for the branch.",
        "-f: Force push, overwriting remote changes.",
        "--tags: Push all tags."
      ]
    },
    {
      "command": "git stash",
      "type": "bash",
      "description": "Temporarily saves changes in a 'stash' and reverts the working directory.",
      "syntax": "git stash [OPTIONS]",
      "usage": "git stash save 'WIP: refactoring'",
      "params": [
        "save: Save the changes with a custom message.",
        "list: Show all stashed changes.",
        "apply: Apply the latest or a specific stash."
      ]
    },
    {
      "command": "git rebase",
      "type": "bash",
      "description": "Reapplies commits on top of another base branch.",
      "syntax": "git rebase [OPTIONS] [BASE_BRANCH]",
      "usage": "git rebase main",
      "params": [
        "--interactive: Edit commit history interactively.",
        "--onto: Rebase onto a specific branch.",
        "--abort: Abort the rebase process."
      ]
    },
    {
      "command": "git reset",
      "type": "bash",
      "description": "Resets the current branch to a specific commit.",
      "syntax": "git reset [OPTIONS] [COMMIT]",
      "usage": "git reset --hard HEAD~1",
      "params": [
        "--soft: Keep changes staged.",
        "--mixed: Unstage changes but keep them in the working directory.",
        "--hard: Discard all changes."
      ]
    },
    {
      "command": "git diff",
      "type": "bash",
      "description": "Shows the differences between commits, branches, or working directory changes.",
      "syntax": "git diff [OPTIONS] [COMMIT1] [COMMIT2]",
      "usage": "git diff HEAD~1 HEAD",
      "params": [
        "--staged: Show changes staged for commit.",
        "--name-only: List filenames without showing differences.",
        "--color: Highlight differences."
      ]
    },
    {
      "command": "git remote",
      "type": "bash",
      "description": "Manages set of tracked repositories.",
      "syntax": "git remote [OPTIONS] [COMMAND]",
      "usage": "git remote add origin https://github.com/user/repo.git",
      "params": [
        "add: Adds a remote repository.",
        "remove: Removes a remote repository.",
        "set-url: Changes the URL of a remote repository."
      ]
    },
    {
      "command": "git fetch",
      "type": "bash",
      "description": "Fetches changes from a remote repository without merging.",
      "syntax": "git fetch [OPTIONS] [REMOTE]",
      "usage": "git fetch origin",
      "params": [
        "--all: Fetch all remotes.",
        "--prune: Remove deleted remote branches.",
        "--tags: Fetch all tags."
      ]
    },
    {
      "command": "git tag",
      "type": "bash",
      "description": "Creates, lists, or deletes tags.",
      "syntax": "git tag [OPTIONS] [TAG_NAME]",
      "usage": "git tag v1.0",
      "params": [
        "-a: Create an annotated tag.",
        "-d: Delete a tag.",
        "-l: List tags matching a pattern."
      ]
    },
    {
      "command": "git show",
      "type": "bash",
      "description": "Shows various types of objects, like commits or tags.",
      "syntax": "git show [OPTIONS] [OBJECT]",
      "usage": "git show v1.0",
      "params": [
        "--stat: Show diffstat of the commit.",
        "--pretty: Format the commit log output."
      ]
    },
    {
      "command": "git cherry-pick",
      "type": "bash",
      "description": "Applies the changes from a specific commit to the current branch.",
      "syntax": "git cherry-pick [COMMIT]",
      "usage": "git cherry-pick abc123",
      "params": [
        "--abort: Abort the cherry-pick operation.",
        "--edit: Edit the commit message before applying."
      ]
    },
    {
      "command": "git mv",
      "type": "bash",
      "description": "Moves or renames a file.",
      "syntax": "git mv [OLD_NAME] [NEW_NAME]",
      "usage": "git mv oldfile.txt newfile.txt",
      "params": [
        "-f: Force the move or rename.",
        "-n: Perform a dry run."
      ]
    },
    {
      "command": "git rm",
      "type": "bash",
      "description": "Removes files from the working directory and staging area.",
      "syntax": "git rm [OPTIONS] [FILE...]",
      "usage": "git rm file.txt",
      "params": [
        "--cached: Remove the file only from the staging area.",
        "--force: Force remove a file."
      ]
    },
    {
      "command": "git reflog",
      "type": "bash",
      "description": "Shows the history of HEAD and other references.",
      "syntax": "git reflog",
      "usage": "git reflog",
      "params": [
        "--expire: Expire older reflog entries.",
        "--all: Show all references."
      ]
    },
    {
      "command": "git blame",
      "type": "bash",
      "description": "Shows line-by-line author information for a file.",
      "syntax": "git blame [OPTIONS] [FILE]",
      "usage": "git blame file.txt",
      "params": [
        "--line-porcelain: Output in a more machine-readable format.",
        "-L: Limit the range of lines to show."
      ]
    },
    {
      "command": "git clean",
      "type": "bash",
      "description": "Removes untracked files and directories.",
      "syntax": "git clean [OPTIONS]",
      "usage": "git clean -fd",
      "params": [
        "-f: Force clean.",
        "-d: Remove untracked directories.",
        "-n: Dry run, show what would be removed."
      ]
    },
    {
      "command": "git archive",
      "type": "bash",
      "description": "Creates an archive of the repository.",
      "syntax": "git archive [OPTIONS] [COMMIT]",
      "usage": "git archive --format=zip --output=repo.zip HEAD",
      "params": [
        "--format: Specify the archive format (zip, tar, etc.).",
        "--output: Specify the output file name.",
        "--prefix: Add a prefix to all files in the archive."
      ]
    },
    {
      "command": "git config",
      "type": "bash",
      "description": "Gets and sets configuration options for Git.",
      "syntax": "git config [OPTIONS] [KEY] [VALUE]",
      "usage": "git config --global user.name 'Your Name'",
      "params": [
        "--global: Set the configuration globally for all repositories.",
        "--system: Set the configuration at the system level.",
        "--local: Set the configuration for the current repository."
      ]
    },
    {
      "command": "git bisect",
      "type": "bash",
      "description": "Helps to find the commit that introduced a bug.",
      "syntax": "git bisect [OPTIONS] [COMMAND]",
      "usage": "git bisect start",
      "params": [
        "start: Begin the bisect session.",
        "good: Mark a commit as 'good'.",
        "bad: Mark a commit as 'bad'."
      ]
    },
    {
      "command": "git config --global core.editor",
      "type": "bash",
      "description": "Sets the default editor for Git commands like commit.",
      "syntax": "git config --global core.editor [EDITOR]",
      "usage": "git config --global core.editor vim",
      "params": [
        "[EDITOR]: Specify the editor (vim, nano, etc.)."
      ]
    },
    {
      "command": "git reflog expire",
      "type": "bash",
      "description": "Expires entries from the reflog based on the specified criteria.",
      "syntax": "git reflog expire [OPTIONS]",
      "usage": "git reflog expire --expire=now --all",
      "params": [
        "--expire: Specify when to expire entries.",
        "--all: Expire all references."
      ]
    },
    {
      "command": "git gc",
      "type": "bash",
      "description": "Runs the garbage collection to optimize the repository.",
      "syntax": "git gc [OPTIONS]",
      "usage": "git gc --aggressive",
      "params": [
        "--aggressive: Optimize the repository more aggressively.",
        "--prune: Remove unreachable objects."
      ]
    },
    {
      "command": "git worktree",
      "type": "bash",
      "description": "Manages multiple working trees attached to the same repository.",
      "syntax": "git worktree [OPTIONS] [COMMAND]",
      "usage": "git worktree add ../new-branch feature-branch",
      "params": [
        "add: Add a new working tree.",
        "remove: Remove a working tree.",
        "list: List all working trees."
      ]
    },
    {
      "command": "git submodule",
      "type": "bash",
      "description": "Manages submodules (repositories within repositories).",
      "syntax": "git submodule [COMMAND]",
      "usage": "git submodule update --init --recursive",
      "params": [
        "add: Add a new submodule.",
        "update: Update the submodule(s).",
        "status: Show the status of submodules."
      ]
    }
  ]
}